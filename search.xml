<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>L3-011 直捣黄龙</title>
    <url>/2021/03/19/L3-011%20%E7%9B%B4%E6%8D%A3%E9%BB%84%E9%BE%99/</url>
    <content><![CDATA[<h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><ul>
<li>单源最短路径，维护多个属性</li>
<li>可用dijkstra，但是代码太过于繁琐，并且数据比较小，采用dfs</li>
</ul>
<span id="more"></span> 

<h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><p>​    普通dfs</p>
<p>​    </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],w[N&lt;&lt;<span class="number">1</span>],e[N&lt;&lt;<span class="number">1</span>],nex[N&lt;&lt;<span class="number">1</span>],top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    e[++top]=y,w[top]=z,nex[top]=head[x],head[x]=top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;m1;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;m2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans_dis,ans_sum,ans_kill,all;</span><br><span class="line"><span class="keyword">int</span> n,k,tot,d[N],v[N];</span><br><span class="line"><span class="built_in">string</span> beginn,endd;</span><br><span class="line"><span class="keyword">int</span> enemy[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> dis,<span class="keyword">int</span> sum,<span class="keyword">int</span> kill)</span></span>&#123;</span><br><span class="line">    vec.push_back(p);</span><br><span class="line">    v[p]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p==m1[endd]&amp;&amp;ans_dis&gt;=dis)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans_dis&gt;dis) ans_dis=dis,ans_sum=sum,ans_kill=kill,ans=vec,all=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            all++;</span><br><span class="line">            <span class="keyword">if</span>(ans_sum==sum&amp;&amp;ans_kill&lt;kill)</span><br><span class="line">                ans_kill=kill,ans=vec;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ans_sum&lt;sum)</span><br><span class="line">                ans_sum = sum, ans_kill = kill,ans=vec;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p];i;i=nex[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> y=e[i];</span><br><span class="line">        <span class="keyword">if</span>(v[y]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(y,dis+w[i],sum+<span class="number">1</span>,kill+enemy[y]);</span><br><span class="line">    &#125;</span><br><span class="line">    vec.pop_back();</span><br><span class="line">    v[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.size();i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;m2[ans[i]];</span><br><span class="line">        <span class="keyword">if</span>(i!=ans.size()<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;all&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ans_dis&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ans_kill;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; beginn &gt;&gt; endd;</span><br><span class="line">    m1[beginn] = ++tot;m2[tot]=beginn;</span><br><span class="line">    m1[endd] = ++tot;m2[tot]=endd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> a;<span class="keyword">int</span> b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(!m1[a])&#123;</span><br><span class="line">            m1[a] = ++tot;m2[tot]=a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t=m1[a];</span><br><span class="line">        enemy[t]=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">string</span> a,b;<span class="keyword">int</span> c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="keyword">if</span>(!m1[a])&#123;</span><br><span class="line">            m1[a] = ++tot;m2[tot]=a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!m1[b])&#123;</span><br><span class="line">            m1[b] = ++tot;m2[tot]=b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> A=m1[a],B=m1[b];</span><br><span class="line">        add(A,B,c);</span><br><span class="line">        add(B,A,c);</span><br><span class="line">    &#125;</span><br><span class="line">    ans_dis=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    dfs(m1[beginn],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    耗时：</p>
<p><img src="https://onefo.top/images/L3-011-1.png" alt="未优化"></p>
<p>​    dfs里可以加判断终点优化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">`   <span class="keyword">if</span>(p==m1[endd])&#123;</span><br><span class="line">    vec.pop_back();</span><br><span class="line">    v[p]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">	&#125;`</span><br></pre></td></tr></table></figure>
<p>​    耗时：</p>
<p><img src="https://onefo.top/images/L3-011-2.png" alt="优化1"></p>
<p>​    进一步可以用记录距离等属性的优化，都很简单，这里不再赘述，因为这样写的话反而比优先队列更繁琐</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>算法竞赛</tag>
        <tag>DFS</tag>
        <tag>最短路</tag>
        <tag>PTA</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>吉如一线段树模板</title>
    <url>/2021/03/18/%E5%90%89%E5%A6%82%E4%B8%80%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><p>​    吉如一老师提出的线段树。</p>
<p>​    想当年只是看懂他我就花了很久</p>
<p>​    这玩意遇到了真的要手打不成…</p>
<p>​    这棵树要维护区间加、<strong>区间取最值</strong>、区间求和、区间最值与<strong>区间历史最值</strong>操作。</p>
<p>​    本文不谈原理，仅解析吉如一线段树。</p>
<span id="more"></span> 

<p>​    附上例题：<a href="https://www.luogu.com.cn/problem/P6242">洛谷P6242</a></p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>​    区间加，区间求和，和区间最值都是不难实现的部分，属于基础。难点在于区间最值与区间历史最值。</p>
<p>​    我们可以看一下例题的题目描述：</p>
<p>​    <img src="https://onefo.top/images/a1.png" alt="Example"></p>
<p>​    2操作为区间更改，4和5为区间最值。</p>
<p>​    B数组也就是维护历史最大值。</p>
<p>​    先不考虑历史最值的问题，如果我们只是区间最值和区间修改、查询的话，每次修改后，我们的最值要如何去维护？在比较大的数据下，我们连区间求和都需要用懒惰标记。但是我们怎么知道当前节点的最值需不要改变？我们知道我们需要<code>l r</code>加上一个数，但是那个最小值/最大值，我们并不知道在哪的地方，我们不确定这个节点属不属于<code>l r</code>，就算属于，我们也不确定这个节点加上数之后还是不是最小的节点。这样的话，我们只能一直到<code>l==r/这段区间的最小值（最大值）>(<)目前求的区间的最小值（最大值）></)目前求的区间的最小值（最大值）></code>两种情况的节点的时候才能确定这段区间的情况。</p>
<p>​    但是吉如一老师提出了一个很好的方案：<br>​<br>$$<br>对于每一个结点，我们维护区间最大值，最大值出现次数，区间严格次大值（用 sec 表示）<br>$$<br>​    具体看代码注释吧，还算详细</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>附上我一年前提交的代码，当年可能是抄完理解了就堪堪了事了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 550010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> mx;<span class="comment">//区间最值</span></span><br><span class="line">    <span class="keyword">int</span> mx_;<span class="comment">//区间历史最值</span></span><br><span class="line">    <span class="keyword">int</span> se;<span class="comment">//次大</span></span><br><span class="line">    <span class="keyword">int</span> cnt;<span class="comment">//最大值出现的次数</span></span><br><span class="line">    ll sum;<span class="comment">//区间和</span></span><br><span class="line">    <span class="keyword">int</span> add1,add1_,add2,add2_;<span class="comment">//四个懒惰标记</span></span><br><span class="line">    <span class="comment">//add1为当前区间最大值的懒惰标记</span></span><br><span class="line">    <span class="comment">//add2为当前区间非最大值的懒惰标记</span></span><br><span class="line">    <span class="comment">//add1_为当前区间历史 add1最大值的懒惰标记</span></span><br><span class="line">    <span class="comment">//add2_为当前区间历史 add2非最大值的懒惰标记</span></span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,f;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上传</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;<span class="comment">//更新区间和，区间最大值，次大值，历史最大值</span></span><br><span class="line">    t[p].sum=t[p*<span class="number">2</span>].sum+t[p*<span class="number">2</span>+<span class="number">1</span>].sum;<span class="comment">//区间和</span></span><br><span class="line">    t[p].mx_=max(t[p*<span class="number">2</span>].mx_,t[p*<span class="number">2</span>+<span class="number">1</span>].mx_);<span class="comment">//历史区间最大值</span></span><br><span class="line">    <span class="keyword">if</span>(t[p*<span class="number">2</span>].mx==t[p*<span class="number">2</span>+<span class="number">1</span>].mx)&#123;<span class="comment">//三种最大值的情况</span></span><br><span class="line">        t[p].mx=t[p*<span class="number">2</span>].mx;</span><br><span class="line">        t[p].se=max(t[p*<span class="number">2</span>].se,t[p*<span class="number">2</span>+<span class="number">1</span>].se);</span><br><span class="line">        t[p].cnt=t[p*<span class="number">2</span>].cnt+t[p*<span class="number">2</span>+<span class="number">1</span>].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t[p*<span class="number">2</span>].mx&gt;t[p*<span class="number">2</span>+<span class="number">1</span>].mx)&#123;</span><br><span class="line">        t[p].mx=t[p*<span class="number">2</span>].mx;</span><br><span class="line">        t[p].se=max(t[p*<span class="number">2</span>].se,t[p*<span class="number">2</span>+<span class="number">1</span>].mx);</span><br><span class="line">        t[p].cnt=t[p*<span class="number">2</span>].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        t[p].mx=t[p*<span class="number">2</span>+<span class="number">1</span>].mx;</span><br><span class="line">        t[p].se=max(t[p*<span class="number">2</span>].mx,t[p*<span class="number">2</span>+<span class="number">1</span>].se);</span><br><span class="line">        t[p].cnt=t[p*<span class="number">2</span>+<span class="number">1</span>].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[p].l=l,t[p].r=r;</span><br><span class="line">    t[p].add1=t[p].add1_=t[p].add2=t[p].add2_=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[p].sum=t[p].mx_=t[p].mx=a[l];</span><br><span class="line">        t[p].se=-INF,t[p].cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid =l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);</span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k1,<span class="keyword">int</span> k1_,<span class="keyword">int</span> k2,<span class="keyword">int</span> k2_)</span></span>&#123;</span><br><span class="line">    <span class="comment">//标记下传时更新当前p的值</span></span><br><span class="line">    <span class="comment">//最大值和非最大值分两部分更新</span></span><br><span class="line">    <span class="comment">//k1为区间增加标记</span></span><br><span class="line">    <span class="comment">//k1_为历史最大值加减标记</span></span><br><span class="line">    <span class="comment">//k2为非最大值加减标记</span></span><br><span class="line">    <span class="comment">//k2_为非最大值历史加减标记</span></span><br><span class="line">    t[p].sum+=<span class="number">1ll</span>*k1*t[p].cnt+<span class="number">1ll</span>*k2*(t[p].r-t[p].l+<span class="number">1</span>-t[p].cnt);<span class="comment">//更新区间和</span></span><br><span class="line">    t[p].mx_=max(t[p].mx_,t[p].mx+k1_);<span class="comment">//更新区间历史最大值</span></span><br><span class="line">    t[p].add1_=max(t[p].add1_,t[p].add1+k1_);<span class="comment">//更新标记</span></span><br><span class="line">    t[p].mx+=k1,t[p].add1+=k1;<span class="comment">//更新区间最大值和懒惰标记</span></span><br><span class="line">    t[p].add2_=max(t[p].add2_,t[p].add2+k2_);<span class="comment">//更新非最大值标记</span></span><br><span class="line">    <span class="keyword">if</span>(t[p].se!=-INF) t[p].se+=k2;<span class="comment">//更新次大值</span></span><br><span class="line">    t[p].add2+=k2;<span class="comment">//更新非最大值标记</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;<span class="comment">//标记下穿</span></span><br><span class="line">    <span class="comment">//每段区间分为两部分，一部分为最大值，一部分为非最大值。</span></span><br><span class="line">    <span class="comment">//如果当前区间有上个区间的最大值，即更新最大值与非最大值</span></span><br><span class="line">    <span class="comment">//如果没有，则全部当成非最大值更新</span></span><br><span class="line">    <span class="keyword">int</span> temp=max(t[p*<span class="number">2</span>].mx,t[p*<span class="number">2</span>+<span class="number">1</span>].mx);<span class="comment">//区间最大值</span></span><br><span class="line">    <span class="keyword">if</span>(t[p*<span class="number">2</span>].mx==temp)<span class="comment">//如果左子树有最大值的话 就需要更新左子树</span></span><br><span class="line">        update(<span class="number">2</span>*p,t[p].add1,t[p].add1_,t[p].add2,t[p].add2_);</span><br><span class="line">    <span class="keyword">else</span> update(<span class="number">2</span>*p,t[p].add2,t[p].add2_,t[p].add2,t[p].add2_);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(t[p*<span class="number">2</span>+<span class="number">1</span>].mx==temp)<span class="comment">//如果右子树有最大值的话 就需要更新右子树</span></span><br><span class="line">        update(<span class="number">2</span>*p+<span class="number">1</span>,t[p].add1,t[p].add1_,t[p].add2,t[p].add2_);</span><br><span class="line">    <span class="keyword">else</span> update(<span class="number">2</span>*p+<span class="number">1</span>,t[p].add2,t[p].add2_,t[p].add2,t[p].add2_);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//清空标记</span></span><br><span class="line">    t[p].add1=t[p].add1_=t[p].add2=t[p].add2_=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify1</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;<span class="comment">//区间加</span></span><br><span class="line">    <span class="keyword">if</span>(t[p].l&gt;r||t[p].r&lt;l) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r)&#123;<span class="comment">//最大值和非最大值都加上k</span></span><br><span class="line">        update(p,k,k,k,k);<span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    modify1(<span class="number">2</span>*p,l,r,k),modify1(<span class="number">2</span>*p+<span class="number">1</span>,l,r,k);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//往下知道满足条件为止，最差把l==r时的值给更新了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify2</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;<span class="comment">//取min（a[i],v）;</span></span><br><span class="line">    <span class="keyword">if</span>(t[p].l&gt;r||t[p].r&lt;l||k&gt;=t[p].mx) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r&amp;&amp;k&gt;t[p].se)&#123;<span class="comment">//更新最大值，并且k在最大值和次大值之间，把最大值更为次大值</span></span><br><span class="line">        update(p,k-t[p].mx,k-t[p].mx,<span class="number">0</span>,<span class="number">0</span>);<span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    modify2(p*<span class="number">2</span>,l,r,k),modify2(p*<span class="number">2</span>+<span class="number">1</span>,l,r,k);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query3</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="comment">//求区间和</span></span><br><span class="line">    <span class="keyword">if</span>(t[p].l&gt;r||t[p].r&lt;l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r) <span class="keyword">return</span> t[p].sum;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">return</span> query3(p*<span class="number">2</span>,l,r)+query3(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query4</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="comment">//求区间最大值</span></span><br><span class="line">    <span class="keyword">if</span>(t[p].l&gt;r||t[p].r&lt;l) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r) <span class="keyword">return</span> t[p].mx;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">return</span> max(query4(p*<span class="number">2</span>,l,r),query4(p*<span class="number">2</span>+<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query5</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="comment">//求历史最大值</span></span><br><span class="line">    <span class="keyword">if</span>(t[p].l&gt;r||t[p].r&lt;l) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r) <span class="keyword">return</span> t[p].mx_;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">return</span> max(query5(p*<span class="number">2</span>,l,r),query5(p*<span class="number">2</span>+<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;f;</span><br><span class="line">        <span class="keyword">int</span> l,r,k;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">            modify1(<span class="number">1</span>,l,r,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(f==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">            modify2(<span class="number">1</span>,l,r,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(f==<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query3(<span class="number">1</span>, l, r) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(f==<span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query4(<span class="number">1</span>, l, r) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(f==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query5(<span class="number">1</span>, l, r) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>算法竞赛</tag>
        <tag>线段树</tag>
        <tag>模板</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树模板</title>
    <url>/2021/03/17/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h4 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h4><p>​    以下为线段树基础求和模板,带懒惰标记</p>
<p>​    附例题：<a href="https://www.luogu.com.cn/problem/P3372">洛谷P3372</a></p>
<span id="more"></span> 
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> dat,lazy;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[p].l=l,t[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        t[p].dat=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);</span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    t[p].dat=t[p*<span class="number">2</span>].dat+t[p*<span class="number">2</span>+<span class="number">1</span>].dat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒惰传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    t[p*<span class="number">2</span>].lazy+=t[p].lazy;</span><br><span class="line">    t[p*<span class="number">2</span>+<span class="number">1</span>].lazy+=t[p].lazy;</span><br><span class="line">    t[p*<span class="number">2</span>].dat+=t[p].lazy*(t[p*<span class="number">2</span>].r-t[p*<span class="number">2</span>].l+<span class="number">1</span>);</span><br><span class="line">    t[p*<span class="number">2</span>+<span class="number">1</span>].dat+=t[p].lazy*(t[p*<span class="number">2</span>+<span class="number">1</span>].r-t[p*<span class="number">2</span>+<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">    t[p].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r)&#123;</span><br><span class="line">        t[p].dat+=v*(t[p].r-t[p].l+<span class="number">1</span>);</span><br><span class="line">        t[p].lazy+=v;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid =t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) change(p*<span class="number">2</span>,l,r,v);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) change(p*<span class="number">2</span>+<span class="number">1</span>,l,r,v);</span><br><span class="line">    t[p].dat=t[p*<span class="number">2</span>].dat+t[p*<span class="number">2</span>+<span class="number">1</span>].dat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//区间查询</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r) <span class="keyword">return</span> t[p].dat;</span><br><span class="line">    push(p);</span><br><span class="line">    <span class="keyword">int</span> mid =t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) val+=ask(p*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) val+=ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y,z;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">            change(<span class="number">1</span>,x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ask(<span class="number">1</span>,x,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h4><h5 id="线段树进阶1"><a href="#线段树进阶1" class="headerlink" title="线段树进阶1:"></a>线段树进阶1:</h5><p>​        带乘法操作 <a href="https://www.luogu.com.cn/problem/P3373">洛谷P3373</a></p>
<p>​        模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> dat,lazy,mul;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> n,m,mod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[p].l=l,t[p].r=r;t[p].mul=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        t[p].dat=a[l]%mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);</span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    t[p].dat=(t[p*<span class="number">2</span>].dat+t[p*<span class="number">2</span>+<span class="number">1</span>].dat)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒惰传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[p].lazy==<span class="number">0</span>&amp;&amp;t[p].mul==<span class="number">1</span>) <span class="keyword">return</span> ;<span class="comment">//</span></span><br><span class="line">    t[p*<span class="number">2</span>].dat=(t[p*<span class="number">2</span>].dat*t[p].mul)%mod;</span><br><span class="line">    t[p*<span class="number">2</span>+<span class="number">1</span>].dat=(t[p*<span class="number">2</span>+<span class="number">1</span>].dat*t[p].mul)%mod;</span><br><span class="line"></span><br><span class="line">    t[p*<span class="number">2</span>].dat=(t[p*<span class="number">2</span>].dat+t[p].lazy*(t[p*<span class="number">2</span>].r-t[p*<span class="number">2</span>].l+<span class="number">1</span>))%mod;</span><br><span class="line">    t[p*<span class="number">2</span>+<span class="number">1</span>].dat=(t[p*<span class="number">2</span>+<span class="number">1</span>].dat+t[p].lazy*(t[p*<span class="number">2</span>+<span class="number">1</span>].r-t[p*<span class="number">2</span>+<span class="number">1</span>].l+<span class="number">1</span>))%mod;</span><br><span class="line"></span><br><span class="line">    t[p*<span class="number">2</span>].lazy=(t[p*<span class="number">2</span>].lazy*t[p].mul+t[p].lazy)%mod;</span><br><span class="line">    t[p*<span class="number">2</span>+<span class="number">1</span>].lazy=(t[p*<span class="number">2</span>+<span class="number">1</span>].lazy*t[p].mul+t[p].lazy)%mod;</span><br><span class="line"></span><br><span class="line">    t[p*<span class="number">2</span>].mul=(t[p].mul*t[p*<span class="number">2</span>].mul)%mod;</span><br><span class="line">    t[p*<span class="number">2</span>+<span class="number">1</span>].mul=(t[p].mul*t[p*<span class="number">2</span>+<span class="number">1</span>].mul)%mod;</span><br><span class="line"></span><br><span class="line">    t[p].lazy=<span class="number">0</span>;</span><br><span class="line">    t[p].mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//区间修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r)&#123;</span><br><span class="line">        t[p].dat=(t[p].dat+v*(t[p].r-t[p].l+<span class="number">1</span>))%mod;</span><br><span class="line">        t[p].lazy=(t[p].lazy+v)%mod;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid =t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) change(p*<span class="number">2</span>,l,r,v);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) change(p*<span class="number">2</span>+<span class="number">1</span>,l,r,v);</span><br><span class="line">    t[p].dat=(t[p*<span class="number">2</span>].dat+t[p*<span class="number">2</span>+<span class="number">1</span>].dat)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_mul</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r)&#123;</span><br><span class="line">        t[p].dat=(t[p].dat*v)%mod;</span><br><span class="line">        t[p].lazy=(t[p].lazy*v)%mod;</span><br><span class="line">        t[p].mul=(t[p].mul*v)%mod;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid =t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) change_mul(p*<span class="number">2</span>,l,r,v);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) change_mul(p*<span class="number">2</span>+<span class="number">1</span>,l,r,v);</span><br><span class="line">    t[p].dat=(t[p*<span class="number">2</span>].dat+t[p*<span class="number">2</span>+<span class="number">1</span>].dat)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//区间查询</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r) <span class="keyword">return</span> t[p].dat;</span><br><span class="line">    push(p);</span><br><span class="line">    <span class="keyword">int</span> mid =t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) val=(val+ask(p*<span class="number">2</span>,l,r))%mod;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) val=(val+ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r))%mod;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y,z;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">            change_mul(<span class="number">1</span>,x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y,z;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">            change(<span class="number">1</span>,x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ask(<span class="number">1</span>,x,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="线段树进阶2："><a href="#线段树进阶2：" class="headerlink" title="线段树进阶2："></a>线段树进阶2：</h5><p>​        <a href="/2021/03/18/%E5%90%89%E5%A6%82%E4%B8%80%E7%BA%BF%E6%AE%B5%E6%A0%91/" title="吉如一线段树">吉如一线段树</a>  <a href="https://www.luogu.com.cn/problem/P6242">洛谷P6242</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>算法竞赛</tag>
        <tag>线段树</tag>
        <tag>模板</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>L3-003 社交集群</title>
    <url>/2021/03/15/L3-003%20%E7%A4%BE%E4%BA%A4%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><ul>
<li><h6 id="第一眼看到就是并查集"><a href="#第一眼看到就是并查集" class="headerlink" title="第一眼看到就是并查集"></a>第一眼看到就是并查集</h6></li>
<li><h6 id="求连通块的个数和每个连通块的大小"><a href="#求连通块的个数和每个连通块的大小" class="headerlink" title="求连通块的个数和每个连通块的大小"></a>求连通块的个数和每个连通块的大小</h6></li>
<li><h6 id="1000的数据范围不需要任何优化"><a href="#1000的数据范围不需要任何优化" class="headerlink" title="1000的数据范围不需要任何优化"></a>1000的数据范围不需要任何优化</h6></li>
</ul>
<span id="more"></span> 
<p>并查集：待补充…</p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>​    首先快速敲出来有路径压缩的代码。</p>
<p>​    每一次读到新的兴趣，记录一下当前的人当作标志，以后再读到的时候直接merge这个人就好了</p>
<p>​    在并查集进行merge操作时顺便统计连通块的数量即size数组。</p>
<p>​</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1005</span>],v[<span class="number">1005</span>],all,size[<span class="number">1005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=find(a),fb=find(b);</span><br><span class="line">    <span class="keyword">if</span>(fa!=fb)&#123;</span><br><span class="line">        f[fb]=fa;</span><br><span class="line">        size[fa]+=size[fb];</span><br><span class="line">        size[fb]=<span class="number">0</span>;</span><br><span class="line">        all--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    all=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i,size[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t;<span class="keyword">char</span> c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;c;</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">            <span class="keyword">if</span>(!v[a]) v[a]=i;</span><br><span class="line">            <span class="keyword">else</span> merge(i,v[a]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;all&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(size[i]) vec.push_back(size[i]);</span><br><span class="line">    sort(vec.begin(),vec.end(),greater&lt;&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.size();i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[i] ;</span><br><span class="line">        <span class="keyword">if</span>(i!=vec.size()<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>​    既然连size都写出来了，那在以上基础上可以加上按秩归并，贴上代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1005</span>],v[<span class="number">1005</span>],all,size[<span class="number">1005</span>],high[<span class="number">1005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=find(a),fb=find(b);</span><br><span class="line">    <span class="keyword">if</span>(high[fb]&gt;high[fa])&#123;</span><br><span class="line">        fa^=fb;</span><br><span class="line">        fb^=fa;</span><br><span class="line">        fa^=fb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fa!=fb)&#123;</span><br><span class="line">        f[fb]=fa;</span><br><span class="line">        size[fa]+=size[fb];</span><br><span class="line">        size[fb]=<span class="number">0</span>;</span><br><span class="line">        high[fa]=max(high[fa],<span class="number">1</span>+high[fb]);</span><br><span class="line">        all--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    all=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i,size[i]=<span class="number">1</span>,high[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t;<span class="keyword">char</span> c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;c;</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">            <span class="keyword">if</span>(!v[a]) v[a]=i;</span><br><span class="line">            <span class="keyword">else</span> merge(i,v[a]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;all&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(size[i]) vec.push_back(size[i]);</span><br><span class="line">    sort(vec.begin(),vec.end(),greater&lt;&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.size();i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[i] ;</span><br><span class="line">        <span class="keyword">if</span>(i!=vec.size()<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>算法竞赛</tag>
        <tag>PTA</tag>
        <tag>蓝桥杯</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
</search>
